parameters = {
    'penalty': ('l1', 'l2', 'elasticnet', None),
    'C': (1, 50, 100, 500, 1000),
    'max_iter': (80, 100, 200, 500),
    'solver': ('newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga'),
    'class_weight': ('balanced', None),
    'multi_class': ('multinomial', 'ovr')
}
clf = LogisticRegression(random_state=0)

parameters = {
    'n_neighbors': (5, 10, 50, 100),
    'metric': ('euclidean', 'manhattan', 'minkowski', 'cosine', 'chebyshev', 'mahalanobis', 'seuclidean'),
    'p': (1, 2, 3, 5, 10),
    'weights': ('uniform', 'distance'),
    'algorithm': ('brute', 'kd_tree', 'ball_tree'),
}
clf = KNeighborsClassifier()


parameters = {
    'criterion': ('gini', 'log_loss', 'entropy'),
    'max_features': (0.1, 0.3, 0.5, 50, "sqrt", "log2", None),
    'max_depth': (10, 50, 100, None),
    'splitter': ('best', 'random'),
    'max_leaf_nodes': (100, 1000, 25000, None),
    'min_samples_split': (2, 5, 10),
    'min_samples_leaf':  (1, 2, 5, 10),
}

clf = DecisionTreeClassifier(random_state=0)


parameters = {
    'n_estimators': (50, 100, 300, 500, 1000),
    'max_depth': (10, 100, 200, None),
    'criterion': ('gini', 'log_loss', 'entropy'),
    'max_features': (0.3, 0.5, 100, "sqrt", "log2", None),
    'max_leaf_nodes': (100, 1000, 25000, None),
    'min_samples_split': (2, 5, 10),
    'min_samples_leaf':  (1, 2, 5, 10),
    'oob_score': (True, False),
    'bootstrap': (True, False),
}

clf = RandomForestClassifier(random_state=0)
